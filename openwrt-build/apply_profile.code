#!/bin/sh

log()
{
	logger -s "$0: $1"
}

uptime_in_seconds()
{
	cut -d'.' -f1 /proc/uptime
}


[ "${USER:-root}" = "root" ] || {
	log "[ERR] user = $USER: seems we are in cross compiling stage?"
	exit 0
}

[ "$( logread | grep "init: process '/bin/ash" | grep "exited. Scheduling for restart." | wc -l )" -gt 10 ] && {
	# daemon.info init: starting pid 15022, tty '/dev/ttyS0': '/bin/ash --login'		// should correctly detect 'ttyS0'
	log "detect_respawing_login daemon alert deactivating ttyS0 in /etc/inittab"
	sed -i 's/^ttyS0/# ttyS0/' /etc/inittab
	kill -HUP 1	# forced process "init" to reload it's config-file
}

jffs2_is_ready()
{
	[ -n "$FAILSAFE" ] && {
		df | grep -q "/overlay"$ || {
			log "please enter 'mount_root', you are in FAILSAFE-mode"
			sleep 3
			return 1
		}
	}

	lock -w /tmp/.switch2jffs && {		# ramdisk useable?
		df | grep -q " /tmp"$ || {
			return 1
		}
	}

	if [ -n "$FAILSAFE" ]; then
		return 0
	else
		[ -e "/lib/functions.sh" ] && . /lib/functions.sh
		[ -e "/etc/functions.sh" ] && . /etc/functions.sh		# deprecated
		[ -e "/lib/functions/boot.sh" ] && . /lib/functions/boot.sh	# removed in r34794
		jffs2_ready && return 0
	fi

	[ -e "/etc/init.d/apply_profile" ] || {
		log "already applied profile, filesystem should be ok"
		return 0
	}

	[ $( uptime_in_seconds ) -gt 240 ] && {
		return 0
	}

	logread | grep -q "jffs2_build_xattr_subsystem: complete building xattr subsystem" && {
		touch "/tmp/JFFS2_OK"
	}

	test -e "/tmp/JFFS2_OK"
}

while ! jffs2_is_ready ; do {
	log "waiting for JFFS2 to be ready"
	sleep 10
} done
log "uptime now: $( uptime_in_seconds ) seconds, waiting 5sec"
sleep 5
df | logger

hwprobe()
{
	local machine="$1"

	case "$machine" in
		"Ubiquiti Nanostation2")
			fgrep -q "lpj=918528" "$DMESG" && {
				fgrep -q "CPU revision is: 00019064 (MIPS 4KEc)" "$DMESG" && {
					fgrep -q "ath5k: phy0: Atheros AR2315 chip found (MAC: 0x86, PHY: 0x48)" "$DMESG" && {
						return 0
					}
				}
			}
		;;
		"Ubiquiti Nanostation5")
			fgrep -q "lpj=898048" "$DMESG" && {
				fgrep -q "CPU revision is: 0001800a (MIPS 4Kc)" "$DMESG" && {
					fgrep -q "ath5k: phy0: Atheros AR2313 chip found (MAC: 0x58, PHY: 0x44)" "$DMESG" && {
						return 0
					}
				}
			}
		;;
		"Ubiquiti PicoStation2")
			fgrep -q "lpj=917504" "$DMESG" && {
				fgrep -q "CPU revision is: 00019064 (MIPS 4KEc)" "$DMESG" && {
					fgrep -q "ath5k phy0: Atheros AR2317 chip found (MAC: 0x90, PHY: 0x48)" "$DMESG" && {
						return 0
					}
				}
			}
		;;
		"Ubiquiti PicoStation5"|"Ubiquiti Litestation5")	# nanostation5 -> lpj differs
			fgrep -q "lpj=899072" "$DMESG" && {
				fgrep -q "CPU revision is: 0001800a (MIPS 4Kc)" "$DMESG" && {
					fgrep -q "ath5k phy0: Atheros AR2313 chip found (MAC: 0x58, PHY: 0x44)" "$DMESG" && {
						fgrep -q "ath5k phy0: RF5112B 5GHz radio found (0x36)" "$DMESG" && {
							return 0
						}
					}
				}
			}
		;;
	esac

	return 1
}

DMESG="/tmp/dmesg.boot"
[ -e "$DMESG" ] || {
	dmesg >"$DMESG"
}

try_device()
{
	I=$(( ${I:=0} + 1 ))	# global_var

	case "$I" in
		 1) HARDWARE="Linksys WRT54G/GS/GL" ;;		# brcm47xx
		 2) HARDWARE="Ubiquiti Bullet M" ;;		# ar71xx
		 3) HARDWARE="TP-LINK TL-WR1043ND" ;;		# ar71xx
		 4) HARDWARE="Buffalo WHR-HP-G54" ;;		# brcm47xx
		 5) HARDWARE="SPW500V" ;;			# speedport w500v / aldi router
		 6) HARDWARE="ASUS WL-HDD" ;;			# brcm47xx
		 7) HARDWARE="ASUS WL-500g Premium V2" ;;	# brcm47xx
		 8) HARDWARE="ASUS WL-500g Premium" ;;		# brcm47xx
		 9) HARDWARE="Dell TrueMobile 2300" ;;		# brcm47xx // nvram set ModelId=WX-5565 commit
		10) HARDWARE="Ubiquiti RouterStation Pro" ;;	# ar71xx
		11) HARDWARE="4G Systems MTX-1 Board" ;;	# au1000 / meshcube
		12) HARDWARE="Buffalo WZR-HP-AG300H" ;;		# ar71xx
		13) HARDWARE="Ubiquiti Nanostation M" ;;	# ar71xx
		14) HARDWARE="TP-LINK TL-WR703N" ;;             # ar71xx
		15) HARDWARE="TP-LINK TL-WR842ND" ;;		# ar71xx
		16) HARDWARE="TP-LINK TL-MR3420" ;;		# ar71xx
		17) HARDWARE="TP-LINK TL-MR3020" ;;		# ar71xx
		18) HARDWARE="Seagate FreeAgent DockStar" ;;	# kirkwood
		19) HARDWARE="TP-LINK TL-WR841N/ND v7" ;;	# ar71xx
		20) HARDWARE="TP-LINK TL-WR841N/ND v8" ;;	# ar71xx
		21) HARDWARE="TP-LINK TL-WDR3600/4300/4310" ;;	# ar71xx
		*)
			HARDWARE=
			return 1
		;;
	esac
}

if   hwprobe "Ubiquiti Nanostation2"; then
	HARDWARE="Ubiquiti Nanostation2"
elif hwprobe "Ubiquiti Nanostation5"; then
	HARDWARE="Ubiquiti Nanostation5"
fi

[ -z "$HARDWARE" ] && {
	while try_device; do {
		fgrep -q "$HARDWARE" "$DMESG" && break
	} done
}

  if [ -n "$HARDWARE" ]; then
	case "$HARDWARE" in
		"Ubiquiti Bullet M")
			ip address show | fgrep -q " 00:27:22:" && HARDWARE="Ubiquiti Picostation M2"
		;;
	esac
elif hwprobe "Ubiquiti PicoStation2"; then		# Atheros-Platform: http://www.ubnt.com/picostation
	HARDWARE="Ubiquiti PicoStation2"
elif hwprobe "Ubiquiti PicoStation5"; then		# Atheros-Platform: http://www.ubnt.com/picostation5
	HARDWARE="Ubiquiti PicoStation5"
elif [ -e "/etc/HARDWARE" ]; then
	log "could not detect hardware, trying /etc/HARDWARE"
	read HARDWARE </etc/HARDWARE
else
	log "could not detect hardware, please enforce manually with a text in /etc/HARDWARE - abort"

	[ "$1" = "help" ] || exit 1
fi
log "detected: $HARDWARE and wrote to '/etc/HARDWARE' for later monitoring"
echo "$HARDWARE" >"/etc/HARDWARE"

case "$HARDWARE" in
	"Linksys WRT54"*|"Buffalo WHR-HP-G54"|"Dell TrueMobile 2300")
		rm /etc/modules.d/19-usb-brcm47xx /etc/modules.d/50-usb-ohci /etc/modules.d/20-usb-core
	;;
esac

INSTALLATION="$1"
PROFILE_MODE="$2"
NODENUMBER="$3"
GATEWAY="$4"


[ "$INSTALLATION" = "?" ] || {
 SIM_ARG1="$( uci get system.@profile[0].name | cut -d'_' -f1 )"
 SIM_ARG2="$( uci get system.@profile[0].name | cut -d'_' -f2 )"
 SIM_ARG3="$( uci get system.@profile[0].nodenumber )"
}

has_default_route ()
{
	[ -e /sbin/route ] && {
		route | grep -q ^default && return 0
	}

	[ -n "$( ip route list exact 0.0.0.0/0 )" ] && {
		return 0
	}

	return 1
}

has_default_route && {
	[ "$( uci get network.wan.proto )" = "dhcp" ] && {
		SIM_ARG4="dhcp"		# auf masq=1 testen?
	}
}



#######################################
#
# enforcing a profile (uncomment!)
#
#SIM_ARG1="olympia"
#SIM_ARG2="adhoc"
#SIM_ARG3=2		# 2,3,4,...,n (number 1 is reserved for vpn-server)

#[ "$SIM_ARG3" = "2" ] && SIM_ARG4="dhcp"
#
#######################################



[ -n "$SIM_ARG1" -a -n "$SIM_ARG2" -a -n "$SIM_ARG3" -a -z "$PROFILE_MODE" ] && {
	echo "detected already set values:"
	echo "INSTALLATION: $SIM_ARG1"
	echo "PROFILE_MODE: $SIM_ARG2"
	echo "NODENUMBER: $SIM_ARG3"
	echo "GATEWAY: $SIM_ARG4"
	echo

	[ "$1" = "boot" ] || {
		echo "press <enter> to continue/reapply these values or strg+c to abort"
		[ "$1" = "boot" ] || read DUMMY
	}

	INSTALLATION=$SIM_ARG1
	PROFILE_MODE=$SIM_ARG2
	NODENUMBER=$SIM_ARG3
	GATEWAY=$SIM_ARG4
}

[ -z "$NODENUMBER" -o -z "$INSTALLATION" -o -z "$PROFILE_MODE" -o "$INSTALLATION" = "?" ] && {
	echo "Usage: $0 <installation> <adhoc|ap|hybrid> <nodenumber> <gateway|dhcp|empty>"
	echo
	echo "		 installation = {"

	grep ^"	[a-z0-9|]*)" $0.definitions | sed 's/)//g' | while read line; do {
		echo "					$line"
	} done

	echo "				}"

	exit 1
}

case "$PROFILE_MODE" in
	ap|apB|apC|adhoc|ap5|adhoc5|hybrid)
		log "[OK] mode '$PROFILE_MODE' is valid"
	;;
	*)
		log "abort, mode must be one of [ap|adhoc|hybrid]"
		exit 1
	;;
esac

if [ -e /tmp/LOCKFILE_APPLY ]; then
	log "abort: /tmp/LOCKFILE_APPLY exists"
	exit 1
else
	touch /tmp/LOCKFILE_APPLY
fi

password_was_never_set()
{
	grep -qs '^root:[!x]\?:' /etc/shadow
}

password_set()
{
	local PASSWORD="${1:-admin}"
	local credentials

	password_was_never_set || {
		log "password_set() ignore call, password already set"
		return 0
	}

	log "password_set() to '$PASSWORD'"
	sh -c "echo '$PASSWORD'; sleep 1; echo '$PASSWORD'" | passwd>/dev/null 2>&1
	log "password_set() [OK]"

	if [ "$INSTALLATION" != "ffweimar" ]; then	#no web server authentication on weimarnetz routers
		echo "/cgi-bin/:root:$PASSWORD" >/etc/httpd.conf

		for credentials in "$HTTPD_CREDENTIALS"; do {
			echo "/cgi-bin/:$credentials" >>/etc/httpd.conf
		} done
	fi

	which dropbear >/dev/null || {
		log "missing dropbear, allowing telnet login permanentely in /bin/login.sh"
		sed -i 's/exit 0/# exit 0/' /bin/login.sh
	}
}

case "$PROFILE_MODE" in
	hybrid)
		PROFILE_MODE="adhoc"
		. ${0}.definitions
		PROFILE_MODE="hybrid"

		[ -z "$SSID_ENFORCED" ] && {
			SSID_ENFORCED="$INSTALLATION $NODENUMBER"
		}
	;;
	*)
		. ${0}.definitions
	;;
esac

[ -z "$CHANNEL" ] && CHANNEL=1

case "$HARDWARE" in
	"Ubiquiti Bullet M")
		[ -n "$TXPOWER" ] && {
			# https://dev.openwrt.org/browser/trunk/package/iwinfo/src/iwinfo_lib.c#L31
			TXPOWER=$(( $TXPOWER - 12 ))
		}
	;;
esac

#get old hostname or hostname set in system config
OLD_HOSTNAME="$( uci get -q meshwizard.system.hostname )"
[ -z "$OLD_HOSTNAME" ] && {
	OLD_HOSTNAME="$( uci get system.@system[0].hostname )"
}

case "$OLD_HOSTNAME" in
	OpenWrt|"")
		OLD_HOSTNAME="${INSTALLATION}-${PROFILE_MODE}-${GATEWAY}-${NODENUMBER}"
		log "using new hostname $OLD_HOSTNAME"
	;;
	*)
		log "leaving hostname $OLD_HOSTNAME"
	;;
esac

echo "$OLD_HOSTNAME" >/proc/sys/kernel/hostname

_config_polipo ()
{
	local net_allowed="10.0.0.0/8"		# fixme! hardcoded (restrict to HNA4?)
	local dropfile="/etc/hosts.drop"
	local cache_path="/tmp/usb0"

	cat >/etc/config/polipo <<EOF
config 'polipo' 'daemon'
	option 'daemonise' '1'
	option 'pidFile' '/var/run/polipo.pid'

config 'polipo' 'general'
	option 'enabled' '1'
	# adress on which polipo will listen, 0.0.0.0 means all addresses
	option 'proxyAddress' '0.0.0.0'
	option 'proxyPort' '8123'
	list 'allowedClients' '$net_allowed'
	# how much RAM memory should Polipo use (in bytes).
	option 'chunkHighMark' '1048576'
	# enable disk cache index and serverlist of integrated polipo web interface
	#option 'disableIndexing' '0'
	#option 'disableServersList' '0'
	# disable loging to syslog 
	# option 'logSyslog' '0'
	# set log file location (disabled when not set)
	option 'logFile' '$cache_path/polipo.log'
	option 'forbiddenFile' '$dropfile'
	option 'dnsQueryIPv6' 'false'
	option 'dnsUseGethostbyname' 'true'
	option 'dnsNameServer' '127.0.0.1'
	option 'dnsMaxTimeout' '1'
	option 'dnsNegativeTtl' '1'

config 'polipo' 'cache'
	# disk cache location, you should always use external storage device
	# (disabled when not set)
	option 'diskCacheRoot' '$cache_path'
	# disk cache cleanup settings
	#option 'diskCacheUnlinkTime' '20d'
	#option 'diskCacheTruncateTime' '5d'
	#option 'diskCacheTruncateSize' '3145728'
	# set to 1 if proxy is used by multiple users
	option 'cacheIsShared' '1'

config 'polipo' 'pmm'
	# poor man's multiplexing segment size to fetch
	option 'pmmSize' '8192'
EOF
}

_config_system ()
{
	local NODE="$1"

	echo "${OLD_HOSTNAME}" >/proc/sys/kernel/hostname

	rm /etc/config/system
	touch /etc/config/system

	#system section of system
	uci set system.system="system"
	uci set system.system.hostname="$OLD_HOSTNAME"
	uci set system.system.timezone="${TIMEZONE:-GMT0}"
	uci set system.system.cronloglevel="9"
	uci set system.system.log_size="16"
	if [ "$INSTALLATION" = "ffweimar" ]; then       #restore all settings in profile ffweimar 
                uci set system.system.keepsettings="1"
                uci set system.system.noswinstall="1"
	else
                uci set system.system.keepsettings="0"
	fi
	[ -n "$( uci get meshwizard.system.conloglevel )" ] && {
		uci set system.system.conloglevel="$( uci get meshwizard.system.conloglevel )"
	}
	[ -n "$( uci get meshwizard.system.latitude )" ] && {
		uci set system.system.latitude="$( uci get meshwizard.system.latitude )"
	}
	[ -n "$( uci get meshwizard.system.longitude )" ] && {
		uci set system.system.longitude="$( uci get meshwizard.system.longitude )"
	}
	[ -n "$( uci get meshwizard.system.location )" ] && {
		uci set system.system.location="$( uci get meshwizard.system.location )"
	}
	
	#ntp section of system

	uci set system.ntp="timeserver"
	uci add_list system.ntp.server="0.openwrt.pool.ntp.org"
	uci add_list system.ntp.server="1.openwrt.pool.ntp.org"
	uci add_list system.ntp.server="2.openwrt.pool.ntp.org"
	uci add_list system.ntp.server="3.openwrt.pool.ntp.org"
	uci set system.ntp.enable_server="0"

	#weblogin section of system

	case "${INSTALLATION}" in
		*)
			weblogin_hide=
		;;
	esac

	local hide_lang="#"	# default-lang

	case "${INSTALLATION}" in
		preskil*|shankar*|castelfalfi*)
			hide_lang=
		;;
	esac
	
	uci set system.weblogin="weblogin"

	[ -z "$weblogin_hide" ] && {
		uci set system.weblogin.enabled="1"
	}
	uci set system.weblogin.namespace="capital_citys_de"
	[ -z "$hide_lang" ] && {
		uci set system.weblogin.adminlang="en"
	}

	case "${NODE}_${INSTALLATION}" in
		42_ejbw*)
			uci set system.weblogin.authserver="192.168.111.183"
		;;
		6_monami*)
			uci set system.weblogin.authserver="10.63.7.1"
		;;
	esac

	#profile section of system
	uci set system.profile="profile"
	uci set system.profile.name="${INSTALLATION}_${PROFILE_MODE}"
	uci set system.profile.nodenumber="$NODE"
	uci set system.profile.ipsystem="$(IPSYSTEM)"

	#vds section of system
	uci set system.vds="vds"
	uci set system.vds.server="root@intercity-vpn.de:/var/www/networks/${INSTALLATION}/vds/"
	if [ "$INSTALLATION" = "ffweimar" ]; then	#disable vds in profile ffweimar 
		uci set system.vds.enabled="0"
	else
		uci set system.vds.enabled="1"
	fi

	#monitoring section of system
	uci set system.monitoring="monitoring"
	uci set system.monitoring.url="http://intercity-vpn.de/networks/${INSTALLATION}"

	#fwupdate section of system
	uci set system.fwupdate="fwupdate"
	uci set url="http://intercity-vpn.de/firmware"
        if [ "$INSTALLATION" = "ffweimar" ]; then	# autoupdate only stable versions in profile ffweimar
		uci set system.fwupdate.mode="stable"
	else
		uci set system.fwupdate.mode="testing"
        fi

	#admin section of system
	uci set system.admin="admin"
	uci set system.admin.location="$( contact location )"
	uci set system.admin.latlon="$( contact latlon )"
	uci set system.admin.mail="$( contact mail )"
	uci set system.admin.name="$( contact name )"
	uci set system.admin.phone="$( contact phone )"
	uci set system.admin.neturl="$( contact neturl )"

	#vpn section of system
	uci set system.vpn="vpn"
	uci set system.vpn.hostname="weimarnetz.de"
	uci set system.vpn.proto"olsr"
	uci set system.vpn.enable="1"
	uci set system.vpn.ipaddr="77.87.48.19"
	if [ "$INSTALLATION" = "ffweimar" ]; then
		uci set system.vpn.port="5001"
	fi

	uci commit system
}

_config_freifunk ()
{
	#contact section of freifunk
	uci set freifunk.contact="public"
	[ -n "$( uci get meshwizard.contact.name )" ] && {
		uci set freifunk.contact.name="$( uci get meshwizard.contact.name )"
	}
	[ -n "$( uci get meshwizard.contact.nickname )" ] && {
		uci set freifunk.contact.nickname="$( uci get meshwizard.contact.nickname )"
	}
	[ -n "$( uci get meshwizard.contact.mail )" ] && {
		uci set freifunk.contact.mail="$( uci get meshwizard.contact.mail )"
	}
	[ -n "$( uci get meshwizard.contact.phone )" ] && {
		uci set freifunk.contact.phone="$( uci get meshwizard.contact.phone )"
	}
	[ -n "$( uci get meshwizard.contact.note )" ] && {
		uci set freifunk.contact.note="$( uci get meshwizard.contact.note )"
	}
	#community section of freifunk
	uci set freifunk.community="public"
	[ -n "$( uci get meshwizard.community.name )" ] && {
		uci set freifunk.community.name="$( uci get meshwizard.community.name )"
	}
	if [ "$INSTALLATION" = "ffweimar" ]; then
		uci set freifunk.community.owm_api="http://mapapi.weimarnetz.de"
		uci set freifunk.community.mapserver="http://map.weimarnetz.de"
	fi

	uci commit freifunk
 
}

_config_softwareinstall ()
{
	local service

	for service in olsrd crashlog_apport; do {
		/etc/init.d/$service enable
	} done

	for service in samba siproxd netserver ulogd; do {
		/etc/init.d/$service disable
	} done
}

_config_wireless ()			# fixme! channels hardcoded
{
	local NODE="$1"
	local MAC htmode hwmode country ht_cap ht_cap_list hideht i radiotype radiocard hidetx
	local temp="/tmp/config_wireless.tmp"
	local driver_path

	[ -e "/etc/config/wireless" ] || {
		log "omitting section wireless, wifi n/a"
		return 0
	}

	[ -e "$temp" ] && rm "$temp"

	[ -z "$TXPOWER" ] && hidetx="#"

for radiocard in 0 1 2 3; do {

	driver_path="$( uci get wireless.radio${radiocard}.path )"		# e.g. 'platform/ath9k' or 'platform/ar231x-wmac.0'

	# check if real wifi card or only VAP/hybrid interface
	[ "$( uci get wireless.@wifi-iface[${radiocard}].device )" = "radio${radiocard}" ] || break

	[ $radiocard -gt 0 ] && echo "" >>"$temp"

	log "configuring radio${radiocard} ..."

	local hide_mac="#"
	MAC="$( uci get wireless.radio${radiocard}.macaddr )"
	if [ -z "$MAC" ]; then
		[ -z "$driver_path" ] && {
			hide_mac=
			MAC="11:22:33:44:55:66"
			log "[ERR] empty mac, we set $MAC"
		}
	else
		hide_mac=
	fi

	hwmode="$( uci get wireless.radio${radiocard}.hwmode )"		# backup current state
	hwmode="${hwmode:-11g}"

	case "$hwmode" in
		11g|11a)
			hideht="#"
		;;
	esac

	case "$( wireless.radio${radiocard}.htmode )" in		# maybe switched off by user
		"")
			hideht=""
		;;
	esac

	radiotype="$( uci get wireless.radio${radiocard}.type )"	# e.g. 'mac80211' or 'atheros'

	ht_cap_list="$( uci get wireless.radio${radiocard}.ht_capab )"	# backup current state

	ht_cap_uci_output()
	{
		for ht_cap in $ht_cap_list; do {
			echo "	list ht_capab	'$ht_cap'"
		} done
	}

	bssid_wellformed()
	{
		local channel="$1"			# e.g. 161
		local bssid="${2:-02:ca:ff:ee:ba:be}"

		bssid="$( echo "$bssid" | cut -b 1-11 )"	# 02:be:ef:ca:ff:ee -> 02:be:ef:ca

		if [ "$channel" -lt 100 ]; then
			if [ "$channel" -lt 10 ]; then
				echo "${bssid}:00:0${channel}"
			else
				echo "${bssid}:00:$channel"
			fi
		else
			# channel 161 -> bssid ends with ..:01:61"
			echo "${bssid}:0$( echo "$channel" | cut -b 1 ):$( echo "$channel" | cut -b 2-3 )"
		fi
	}

	# detect 5ghz-mode, those are working initially:
	#
	# channel  36 (5180mhz) HT40+| --  |NOHT
	# channel  40 (5200mhz) HT40+|HT40-| --
	# channel  44 (5220mhz) HT40+|HT40-|NOHT
	# channel  48 (5240mhz)  --  |HT40-|NOHT
	# channel 153 (5765mhz)  --  |HT40-|NOHT
	# channel 157 (5785mhz) HT40+|HT40-
	# channel 161 (5805mhz) HT40+|NOHT

	case "$hwmode" in
		11na|11a)
			local channel_now="$( uci get wireless.radio${radiocard}.channel )"
			local bssid_now="$( uci get wireless.@wifi-iface[${radiocard}].bssid )"

			if [ "$bssid_now" = "$( bssid_wellformed "$channel_now" "$BSSID" )" ]; then
				log "[OK] using already configured channel $channel_now"
				CHANNEL="$channel_now"
			else
				CHANNEL=36
			fi

			BSSID="$( bssid_wellformed "$CHANNEL" "$BSSID" )"

			log "[OK] using mode 801.$hwmode now and channel $CHANNEL with bssid: $BSSID"

			case "$MCAST_RATE" in
				1000|2000|5500)
					log "[OK] forcing mcast_rate to lowest basic-rate: 6000"
					MCAST_RATE="6000"
				;;
			esac
		;;
	esac

	case "$CHANNEL" in
		36|37|38|39|40|149|153|161) htmode="HT40+" ;;
		44|157) htmode="HT40-" ;;
		1|2|3|4|5|6) htmode="HT40+" ;;
		   12|13|14) htmode="HT20" ;;		# fixme!
		          *) htmode="HT40-" ;;
	esac

	case "$PROFILE_MODE" in
		hybrid)
			htmode="HT20"
		;;
	esac

	case "$hwmode" in
		11g)
			htmode="HT20"
		;;
	esac

	local hide_noscan
	case "$htmode" in
		"HT20")
			hide_noscan="#"
		;;
	esac

	[ "$hideht" = "#" ] && hide_noscan="#"

	local chanbw="$( uci get wireless.radio${radiocard}.ath9k_chanbw )$( uci get wireless.radio${radiocard}.chanbw )"
	case "$chanbw" in
		5|10|20)
			hide_chanbw=
		;;
		*)
			chanbw=20
			hide_chanbw="#"
		;;
	esac

	if   [ -e /etc/init.d/apply_profile.regulatory.bin ]; then
		country="US		# see hacked /usr/lib/crda/regulatory.bin"
	elif [ $CHANNEL -gt 13 ]; then
		country="JP"
	elif [ $CHANNEL -gt 11 ]; then
		country="DE"
	else
		country="US"
	fi

	case "$PROFILE_MODE" in
		hybrid)
			local ssid_adhoc='weimarnetz'			# fixme! work with 'hidden'
			local ssid_ap="$( uci get wireless.@wifi-iface[$(( ${radiocard} + 1 ))].ssid )"
			[ -z "$ssid_ap" ] && ssid_ap="${INSTALLATION} $NODE"

			cat >>"$temp" <<EOF
config wifi-device radio${radiocard}
	option type	$radiotype
	option country	$country
	option channel	$CHANNEL
$hide_chanbw	option ath9k_chanbw $chanbw		# temporary, 5, 10 or 20 (default)
$hide_chanbw	option chanbw	$chanbw		# since r32596
$hide_mac	option macaddr	$MAC
	option frag	off
$hidetx	option txpower	$TXPOWER
	option beacon_int 1000
${hide_noscan}	option noscan	1
EOF

			[ -n "$driver_path" ] && echo "	option path '$driver_path'" >>"$temp"


			cat >>"$temp" <<EOF
	option hwmode   $hwmode
${hideht}	option htmode   $htmode
$( ht_cap_uci_output )
EOF

	case "$HARDWARE" in
		"Buffalo WHR-HP-G54")
			echo >>"$temp" "	option rxantenna 1"
			echo >>"$temp" "	option rxantenna 1"
		;;
		"Linksys WRT54G"*|"ASUS WL-500g Premium")
			echo >>"$temp" "	option rxantenna 0"
			echo >>"$temp" "	option rxantenna 0"
		;;
	esac

			[ -z "$BSSID" ] && BSSID="$( bssid_wellformed "$CHANNEL" )"

			cat >>"$temp" <<EOF

config wifi-iface
	option device	radio${radiocard}
	option network	wlanadhoc
	option mode	adhoc
	option bssid	'$BSSID'
	option ssid	'${ssid_adhoc}'
	option mcast_rate ${MCAST_RATE}
#	option bintval	1000

config wifi-iface
	option device	radio${radiocard}
	option network	wlan
	option mode	ap
	option ssid	'${ssid_ap}'
EOF
		;;
		ap*)
			local old_essid="$( uci get wireless.@wifi-iface[${radiocard}].ssid )"
			local new_essid="${INSTALLATION} $NODE"

			[ -n "$SSID_ENFORCED" ] && {
				new_essid="$SSID_ENFORCED"
			}

			case "$old_essid" in
				*[0-9])
					new_essid="$old_essid"
				;;
				*")")
					new_essid="$old_essid"
				;;
				*" "*)
					new_essid="$old_essid"
				;;
				LaLaBa*|*Dach)
					new_essid="$old_essid"
				;;
			esac

			cat >>"$temp" <<EOF
config wifi-device radio${radiocard}
	option type	$radiotype
	option country	$country
$hidetx	option txpower	$TXPOWER
	option channel	$CHANNEL
$hide_mac	option macaddr	$MAC
	option frag	off
${hide_noscan}	option noscan	1
EOF

			[ -n "$driver_path" ] && echo "	option path '$driver_path'" >>"$temp"

	grep -q ^"b43 " "/proc/modules" && cat >>"$temp" <<EOF
	option bitrates '6 9 12 18 24 36 48 54'
EOF

			cat >>"$temp" <<EOF
	option hwmode   $hwmode
${hideht}	option htmode   $htmode
$( ht_cap_uci_output )
EOF

			cat >>"$temp" <<EOF

config wifi-iface
	option device	radio${radiocard}
	option network	wlan
	option mode	ap
	option ssid	'${new_essid}'
	option max_num_sta 16		# since r33400
	option max_inactivity 300	# since r33412 [sec]
EOF
		;;
		*)
			local new_essid="bb"

			case "${INSTALLATION}" in
				aschbach*) new_essid="Berghotel" ;;
				ffweimar*) new_essid="weimarnetz" ;;
			esac

			cat >>"$temp" <<EOF
config wifi-device radio${radiocard}
	option type	$radiotype
	option country	$country
	option channel	$CHANNEL
$hide_chanbw	option ath9k_chanbw $chanbw		# temporary, 5, 10 or 20 (default)
$hide_chanbw	option chanbw	$chanbw		# since r32596
$hide_mac	option macaddr	$MAC
	option frag	off
$hidetx	option txpower	$TXPOWER
	option beacon_int 100
${hide_noscan}	option noscan	1
EOF

			[ -n "$driver_path" ] && echo "	option path '$driver_path'" >>"$temp"

	grep -q ^"b43 " "/proc/modules" && cat >>"$temp" <<EOF
	option bitrates '6 9 12 18 24 36 48 54'
EOF

			cat >>"$temp" <<EOF
	option hwmode	$hwmode
${hideht}	option htmode	$htmode
$( ht_cap_uci_output )
EOF

			[ -z "$BSSID" ] && BSSID="$( bssid_wellformed "$CHANNEL" )"

			cat >>"$temp" <<EOF

config wifi-iface
	option device	radio${radiocard}
	option network	wlan
	option mode	adhoc
	option bssid	'$BSSID'
	option ssid	'${new_essid}'
	option mcast_rate ${MCAST_RATE}
#	option bintval	1000
EOF
		;;
	esac

} done

	cat >>"$temp" <<EOF

config auto_optimize
	option neigh	'off'
EOF

	mv "$temp" /etc/config/wireless
}

_config_mail ()
{
	cat >/etc/config/mail <<EOF
config pop3
	option username	'$POP3_USERNAME'
	option password	'$POP3_PASSWORD'
	option server	'pop.gmx.net'
	option port	'110'

config smtp
	option server	'mail.gmx.net'
	option port 	'25'
	option auth	'pop-before-smtp'
	option mail	'wlan-assistance@gmx.de'
	option name	'Ticket-Assistent'
EOF
}

_config_sms ()
{
	cat >/etc/config/sms <<EOF
config sms
	option username	'$SMS77_USERNAME'
	option password	'$SMS77_PASSWORD'
	option post	''
	option phonebook	''
EOF
}

_config_network ()
{
	local NODE="$1"
	local PROTO LANDEV WANDEV

	case "$HARDWARE" in
		"Dell TrueMobile 2300")
			LANMAC="00:90:4b:39:7b:5e"	# fixme!
			WANMAC="00:90:4b:39:7b:5f"	# fixme!
		;;
	esac

	LANDEV="$( uci get network.lan.ifname )"
	WANDEV="$( uci get network.wan.ifname )"

	if [ "$GATEWAY" = "dhcp" ]; then
		PROTO="dhcp"

		[ -n "$LANDEV" -a -z "$WANDEV" ] && {
			log "swapping LANDEV with WANDEV, we are on singleport machine"
			WANDEV="$LANDEV"
			LANDEV=
		}
	else
		PROTO="static"
	fi

	uci delete network.wan
	uci delete network.lan
	uci delete network.wlan
	uci commit

	[ -n "$LANDEV" ] && {
		cat >>/etc/config/network <<EOF

config 'interface' 'lan'
	option 'ifname'   '$LANDEV'
$( test -n "$LANMAC" && echo "	option 'macaddr' '$LANMAC'" )
	option 'proto'    'static'
	option 'ipaddr'   '$( _ipsystem do $NODE | grep LANADR= | cut -d'=' -f2 )'
	option 'netmask'  '$( _ipsystem do $NODE | grep LANMSK= | cut -d'=' -f2 )'

EOF
	}

	if [ -z "$WANDEV" ]; then
			:		# no wandev/singleport
	else
		local hide_gateway="#"
		local wan_ipaddr="$(  _ipsystem do $NODE | grep WANADR= | cut -d'=' -f2 )"
		local wan_netmask="$( _ipsystem do $NODE | grep WANMSK= | cut -d'=' -f2 )"
		local wan_gateway=
		local username password hideip wan_dns


if [ "$INSTALLATION" = "ffweimar" ]; then
        PROTO="dhcp" #set dhcp as default for wan
        hideip="true"
        hide_gateway="#"
fi

		cat >>/etc/config/network <<EOF

config 'interface' 'wan'
	option 'ifname' '$WANDEV'
$( test -n "$WANMAC" && echo "	option 'macaddr' '$WANMAC'" )
$( test -n "$wan_dns" && echo "	option 'wan_dns' '$wan_dns'" )
	option 'proto' '$PROTO'
	option 'dyndns' '$dyndns'
${hideip:+#}	option 'ipaddr'	 '$wan_ipaddr'
${hideip:+#}	option 'netmask' '$wan_netmask'
$hide_gateway	option 'gateway' '$wan_gateway'
${username:+	option 'username' '$username'}
${password:+	option 'password' '$password'}
${password:+	option 'authfail' '1'	# since r33291}
EOF



	fi

	local wlan_ipaddr wlan_netmsk wlan_ifname hide_wifi
	local alias_ifname alias_proto alias_ipaddr alias_netmask alias_network
	local hide="#"

	case "$( uci get wireless.radio0.type )" in
		mac80211)
			wlan_ifname="wlan0"
		;;
		atheros)
			wlan_ifname="ath0"
		;;
		*)
			wlan_ifname="wlan0"
		;;
	esac

	[ -e "/etc/config/wireless" ] || hide_wifi="#"

	wlan_ipaddr="$( _ipsystem do $NODE | grep WIFIADR= | cut -d'=' -f2 )"
	wlan_netmsk="$( _ipsystem do $NODE | grep WIFI_PRE= | cut -d'=' -f2 )"
	wlan_netmsk="$( _net cidr2mask $wlan_netmsk )"

	cat >>/etc/config/network <<EOF

${hide_wifi}config 'interface' 'wlan'
${hide_wifi}	option 'ifname'	'$wlan_ifname'
${hide_wifi}	option 'proto'	'static'
${hide_wifi}	option 'ipaddr'	 '$wlan_ipaddr'
${hide_wifi}	option 'netmask' '$wlan_netmsk'

EOF

	case "$PROFILE_MODE" in
		hybrid)
			cat >>/etc/config/network <<EOF

${hide_wifi}config 'interface' 'wlanadhoc'
${hide_wifi}	option 'ifname'	'${wlan_ifname}-1'
${hide_wifi}	option 'proto'	'static'
${hide_wifi}	option 'ipaddr'	 '$wlan_ipaddr'
${hide_wifi}	option 'netmask' '$wlan_netmsk'

EOF
		;;
	esac


	[ -n "$alias_ipaddr" ] && hide=

	cat >>/etc/config/network <<EOF
${hide}config 'alias'
$hide	option 'interface' '${alias_network:-wlan}'
$hide	option 'proto' 'static'
$hide	option 'ipaddr' '$alias_ipaddr'
$hide	option 'netmask' '${alias_netmask:-255.255.255.255}'
$( test -n "$alias_gateway" && echo "	option 'gateway' '$alias_gateway'" )
EOF
}

_config_dhcp ()			# domain = .olsr
{
	local NODE="$1"
	local wan_dns="$( uci get network.wan.dns )"
	local cache, domain

	if [ "$INSTALLATION" = "ffweimar" ]; then       #set domain to olsr for profile ffweimar
		domain="olsr" 
        else
                domain="lan"
        fi

	case $HARDWARE in
		"TP-LINK TL-WR1043ND"|"BulletM")
			cache="1000"
		;;
		*)
			cache="100"
		;;
	esac

	[ -n "$wan_dns" ] && DNSSERVER="$wan_dns"

	cat >/etc/config/dhcp <<EOF
config dnsmasq
	option cachesize	$cache	# query with 'kill -SIGUSR1 \$( pidof dnsmasq ); logread | tail -n5'
	option domainneeded	0	# forward querys without dots
	option boguspriv	1
	option filterwin2k	0	# enable for dial on demand
	option localise_queries	1
	option rebind_protection 0	# disable if upstream must serve RFC1918 addresses
	option rebind_localhost 0	# enable for RBL checking and similar services
	# list rebind_domain example.lan # whitelist RFC1918 responses for domains
	option local	'/$domain/'
	option domain	'$domain'
	option expandhosts	1
	option nonegcache	0
	option authoritative	1
	option readethers	1
	option leasefile	'/tmp/dhcp.leases'
	option resolvfile	'/tmp/resolv.conf.auto'
	list addnhosts		'/var/etc/hosts'
	list addnhosts		'/etc/local.hosts'
	list server 		'$DNSSERVER'
	# list server		'/mycompany.local/1.2.3.4'
	# option nonwildcard	1
	# list interface	br-lan
	list notinterface	wan
	option dhcpscript	'/etc/dhcp-script.d/10dhcpscript'

config dhcp lan
	option interface	lan
	option start 		$( _ipsystem do "$NODE" | grep ^"LANDHCPSTART=" | cut -d'=' -f2 )
	option limit		$( _ipsystem do "$NODE" | grep ^"LANDHCPNUM="   | cut -d'=' -f2 )
	option leasetime	2h
	option force		1
	option ignore		${DHCP_IGNORE_LAN:-0}

config dhcp wlan
	option interface	wlan
	option start 		$( _ipsystem do "$NODE" | grep ^"WIFIDHCPSTART=" | cut -d'=' -f2 | cut -d'.' -f4 )
	option netmask		$( _net cidr2mask "$( _ipsystem do "$NODE" | grep ^"WIFI_DHCP_PRE=" | cut -d'=' -f2 )" ) # 255.255.255.240?
	option limit		$( _ipsystem do "$NODE" | grep ^"WIFIDHCPNUM=" | cut -d'=' -f2 )			 # fixme! better: 21
	option leasetime	1h
	option force		1
	option ignore		${DHCP_IGNORE_WLAN:-0}

config dhcp wan
	option interface	wan
	option ignore		1
EOF
}

_config_aliases ()
{
	local FILE="/etc/profile"
	touch $FILE

	grep -q ^"alias ll=" $FILE || {
		log "writing ll"
		echo >>$FILE "alias ll='ls -la'"
	}

	grep -q ^"alias flush=" $FILE || {
		log "writing flush"
		echo >>$FILE "alias flush='echo flushing_caches; echo 3 > /proc/sys/vm/drop_caches'"
	}

	grep -q ^"alias lr=" $FILE || {
		log "writing logread-abbreviation: lf"
		echo >>$FILE "alias lr='logread'"	
	}

	grep -q ^"alias regen=" $FILE || {
		log "writing kalua-loader regen()"
		echo >>$FILE "alias regen='/etc/kalua_init ;. /tmp/loader'"
	}

	fgrep -q "[ -e /tmp/loader" $FILE || {
		log "writing kalua-loader -> autoloader"
		echo >>$FILE "[ -e /tmp/loader ] && . /tmp/loader"
	}

	grep -q ^"alias n=" $FILE || {
		log "writing alias 'neigh': use just keyword 'n' to see neighbours"
		echo >>$FILE "alias n='wget -qO - http://127.0.0.1:2006/neighbours'"
	}

	grep -q "033" $FILE || {
		log "writing better prompt"
		echo >>$FILE 'export PS1="\[\033[36m\]\u\[\033[m\]@\[\033[32m\]\h:\[\033[33;1m\]\w\[\033[m\] "'
	}

	grep -q ^"alias myssh=" $FILE || {
		log "alias myssh"
		local KEY="/etc/dropbear/dropbear_dss_host_key"
		local COMMAND="ssh -i $KEY"
		echo >>$FILE "alias myssh='echo \"executing: $COMMAND\"; $COMMAND'"
	}
}

_config_olsrd ()	# example here: http://olsr.org/git/?p=olsrd.git;a=blob;f=files/olsrd.conf.default.full
{
	local NODE="$1"
	local speed="${OLSR_SPEED:-5}"
	local hide_nameservice slave

	if [ -z "$GATEWAY" -a "$PROFILE_MODE" = "ap" ]; then
		slave=1
	else
		slave=0
	fi

	[ $speed -gt 10 ] && hide_nameservice="#"

	local INTERFACES1		# Mode: ether
	local INTERFACES2		# Mode: adhoc
	local hna_net hna_mask main_ip

	hna_net="$(  _ipsystem do $NODE | grep OLSR_HNA= | cut -d'=' -f2 | cut -d'/' -f1 )"
	hna_mask="$( _ipsystem do $NODE | grep OLSR_HNA= | cut -d'/' -f2 )"
	hna_mask="$( _net cidr2mask $hna_mask )"

	local landev="lan"
	local wandev="wan"
	local wifidev="wlan"

	[ -z "$( uci get network.wan.ifname )" ] && {
		wandev=
	}

	# special rule for ejbw/satama here

	[ "$( uci get network.wan.proto )" = "static" ] || {
				# only olsr on wan, if no pppoe/dhcp...
		wandev=		# hint: we must be sure, that network-section is already written
	}

	[ -n "$wandev" ] && {
		wandev=" $wandev"
	}

	case "$PROFILE_MODE" in 
		ap*)
			INTERFACES1="${landev}${wandev}"
			INTERFACES2=
		;;
		adhoc*|hybrid)
			INTERFACES1="${landev}${wandev}"
			INTERFACES2="$wifidev"
		;;
	esac

	main_ip="$( uci get network.lan.ipaddr )"
	[ -z "$main_ip" ] && {
		main_ip="$( uci get network.wan.ipaddr )"
	}

	local fisheye hello_interval tc_interval

	fisheye="1"
	hello_interval="$(( $speed / 2 + 1 ))"

	if [ "$fisheye" = "1" ]; then
		tc_interval="$(( $speed / 2 ))"
		[ "$tc_interval" = "0" ] && tc_interval="1"
	else
		tc_interval="$(( $speed * 2 ))"
	fi

	cat >/etc/config/olsrd <<EOF
config olsrd
	option MainIp			'${main_ip:-0.0.0.0}'
	option DebugLevel		'0'		# 0...9
	option ClearScreen		'no'		# start with -dispout
	option AllowNoInt		'yes'
	option IpVersion		'4'
	option FIBMetric		'flat'		# approx, correct, flat
	option Willingness		'7'
	option TcRedundancy		'2'
	option LinkQualityFishEye	'$fisheye'
	option LinkQualityAlgorithm	'$OLSR_METRIC'	# etx_ff, etx_ffeth, etx_float, etx_fpm
	option MprCoverage		'7'
#	option RtTable			'111'
#	option RtTableDefault		'254'		# cat /etc/iproute2/rt_tables

config meta
	option speedvalue		'$speed'
	option speedalgo		'1'		# like sven-ola fff 1.7.4
	option hnaslave			'$slave'

config Interface
	list interface			'$INTERFACES1'
	option Ip4Broadcast		'255.255.255.255'
	option HelloInterval		'$hello_interval.0'
	option HelloValidityTime	'$(( $speed * 25 )).0'
	option TcValidityTime		'$(( $speed * 100 )).0'
	option TcInterval		'$tc_interval.0'
	option MidInterval		'$(( $speed * 5 )).0'
	option MidValidityTime		'$(( $speed * 100 )).0'
	option HnaInterval		'$(( $speed * 2 )).0'
	option HnaValidityTime		'$(( $speed * 25 )).0'
EOF
[ "$OLSR_METRIC" = "etx_ffeth" ] && {
	cat >>/etc/config/olsrd <<EOF
	option Mode			'ether'		# enforces cost of 0.100
EOF
}
	[ -n "$INTERFACES2" ] && cat >>/etc/config/olsrd <<EOF

config Interface
	list interface			'$INTERFACES2'
	option Ip4Broadcast		'255.255.255.255'
	option HelloInterval		'$hello_interval.0'
	option HelloValidityTime	'$(( $speed * 25 )).0'
	option TcValidityTime		'$(( $speed * 100 )).0'
	option TcInterval		'$tc_interval.0'
	option MidInterval		'$(( $speed * 5 )).0'
	option MidValidityTime		'$(( $speed * 100 )).0'
	option HnaInterval		'$(( $speed * 2 )).0'
	option HnaValidityTime		'$(( $speed * 25 )).0'
EOF

	local interface_mode="mesh"
#	case "$PROFILE_MODE" in
#		adhoc*)
#			case "$( uci get wireless.radio0.hwmode )" in
#				*"a"*)
#					interface_mode="ether"		# fixme! not a good idea for multipoint-stations
#				;;
#			esac
#		;;
#	esac

[ "$OLSR_METRIC" = "etx_ffeth" -a -n "$INTERFACES2" ] && {
	cat >>/etc/config/olsrd <<EOF
	option Mode			'$interface_mode'		# uses normal cost-calculation / default
EOF
}

	cat >>/etc/config/olsrd <<EOF

config LoadPlugin
	option library  'olsrd_jsoninfo.so.0.0'
	option accept	'0.0.0.0'
	option port	'9090'

config LoadPlugin
	option library	'olsrd_arprefresh.so.0.1'

config 'LoadPlugin'
	option 'library' 'olsrd_nameservice.so.0.3'
	option 'ignore' '0'
	option 'hosts_file' '/var/etc/hosts'
	option 'suffix' '.olsr'
	option 'interval' '180'
	option 'timeout' '3600'
	option 'latlon_file' '/var/run/latlon.js'
	option 'latlon_infile' '/var/run/latlon.txt'
	list 'name' '${OLD_HOSTNAME}'

config LoadPlugin
	option library	'olsrd_watchdog.so.0.1'

config LoadPlugin
	option library	'olsrd_dyn_gw.so.0.5'
	option 'CheckInterval' '5000'
	option 'PingInterval' '40'
	option 'Ping' '141.1.1.1'
	option 'Ping' '194.25.2.129'

config LoadPlugin
	option library	'olsrd_txtinfo.so.0.1'
	option accept	'0.0.0.0'
	option port	'2006'

#config LoadPlugin
#	option library	'olsrd_dyn_gw.so.0.5'
#	option 'CheckInterval' '6000'		# milliseconds
#	option 'PingInterval' '40'		# seconds
#	option 'Ping' '8.8.8.8'
#	option 'Ping' '141.1.1.1'

config 'Hna4'
        option 'netaddr' '$hna_net'
        option 'netmask' '$hna_mask'
EOF

#	[ -n "$GATEWAY" ] && {
#		cat >>/etc/config/olsrd <<EOF
#
#config 'Hna4'
#        option 'netaddr' '0.0.0.0'
#        option 'netmask' '0.0.0.0'
#
#EOF
#	}

EOF
}

[ -e /etc/init.d/apply_profile.regulatory.bin ] && {
	rm "/usr/lib/crda/regulatory.bin"
	if ln -s "/etc/init.d/apply_profile.regulatory.bin" "/usr/lib/crda/regulatory.bin"; then
		log "[OK] installed new/magic regulatory.bin in /usr/lib/crda"
	else
		log "[ERR] failed to install regulatory.bin in /usr/lib/crda"
	fi
}

[ -e "/etc/kalua_init" ] && {
	local PARTITION="$( mount | sed -n 's/\(^.*mtd.*\) on .*/\1/p' )"       
        local flash_free=$(df | sed -n "s#^${PARTITION:-/dev/root}[^0-9]*[0-9]*[^0-9]*[0-9]*[^0-9]*\([0-9]*\).*#\1#p")
	local total_ram=$( cat /proc/meminfo|grep MemTotal| cut -f2 -d ':'| cut -f1 -d 'k'| tr -d ' ')
	if [ $total_ram -lt 16384 ] && [ $flash_free -gt 340 ]; then
		log "[OK] building kalua-loader on flash, we are low on RAM =< 16mb"
        	mkdir "/etc/kalua.w"
                /etc/kalua_init
                . /tmp/loader
                [ "$PROFILE_MODE" = "adhoc" ] && {
			log "[OK] marking this node for mode SIMPLE_MESHNODE"
			touch "/www/SIMPLE_MESHNODE"
		}
	
	else
		log "[OK] building kalua-loader in ramdisk"
		/etc/kalua_init
		. /tmp/loader
	fi


	/etc/init.d/S41build_static_netparam # it's essential for ipsystem()
}

# keep important settings
local keepsettings="$( uci get system.@system[0].keepsettings )"           
[ "$keepsettings" != "1" ] && { 
	for SECTION in softwareinstall system mail wireless network dhcp aliases olsrd firewall sms polipo; do {
		log "....working on section '$SECTION'"
		_config_$SECTION "$NODENUMBER"
		log "[ok] ready with section '$SECTION'"
	} done
}

# rewrite new settings
for SECTION in freifunk olsrd; do {
	log "....working on section '$SECTION'"
	_config_$SECTION "$NODENUMBER"
	log "[ok] ready with section '$SECTION'"
} done

/etc/init.d/count_reboots enable
/etc/init.d/generate_kalua_loader enable
/etc/init.d/generate_netparams enable
/etc/init.d/end_boot enable
/etc/init.d/prepare_stuff enable

/etc/init.d/cron.user enable
/etc/init.d/cron disable

[ -e "/etc/init.d/firewall" ] && {
	/etc/init.d/firewall disable
	}

[ -e "/etc/init.d/freifunk" ] && {
	/etc/init.d/freifunk disable
	}


# webserver-related stuff
uci set uhttpd.main.index_page="weimar-splash-index.html"
uci set uhttpd.main.error_page="/weimar-splash-index.html"
uci set uhttpd.main.config="/etc/httpd.conf"
uci set uhttpd.main.interpreter=".sh=/bin/ash"
uci set uhttpd.px5g.state="Thuringia"
uci set uhttpd.px5g.location="Weimar"
uci set uhttpd.px5g.commonname="Weimarnetz e.V."
#delete old self signed certificates, new certificates will be built on next uhttpd restart
[ -e /etc/uhttpd.key ] && {
	rm /etc/uhttpd.*
}
# set bootstrap as new default theme
uci set luci.main.mediaurlbase="/luci-static/bootstrap"

uci set uhttpd.main.max_requests="5"
# uci set uhttpd.main.script_timeout=5			// fixme! needs testing
# uci set uhttpd.main.network_timeout=5
if [ -e "/usr/lib/libcyassl.so" ]; then
	uci set uhttpd.main.listen_https="0.0.0.0:443"
else
	uci delete uhttpd.main.listen_https
fi
uci commit 


[ -s /www/cgi-bin-welcome.sh	] || ln -s /www/cgi-bin-welcome 	/www/cgi-bin-welcome.sh
[ -s /www/cgi-bin-sql.sh	] || ln -s /www/cgi-bin-sql     	/www/cgi-bin-sql.sh
[ -s /www/cgi-bin-tool.sh	] || ln -s /www/cgi-bin-tool_fff+	/www/cgi-bin-tool.sh

#copy alternative status.html if no luci is installed

if [ -d /www/cgi-bin/luci ]; then
	rm /www/cgi-bin-status.html.weimarnetz
else
	mv /www/cgi-bin-status.html.weimarnetz /www/cgi-bin-status.html
fi


touch /www/SOFTWARE_FULLY_INSTALLED

. /tmp/loader

jffs2_is_ready && {
	has_default_route && {
		_ssh sanitize_and_cleanup_keys
		[ -e /tmp/REGISTRATED ] && rm /tmp/REGISTRATED
		/usr/sbin/cron.registrator_client.sh
	}
}

echo
echo "[ok] R E A D Y"
echo
echo "removing /etc/init.d/apply_profile with:"
echo "rm /etc/init.d/apply_profile"
echo
echo "maybe kill S98apply_profile!"
echo "now type: reboot && exit"
[ -n "$FAILSAFE" ] && echo "you are in FAILSAFE mode, try 'reboot -f && exit'"
exit 0
# END
