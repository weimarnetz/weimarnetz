#!/bin/sh

_ipsystem_get()
{
	local nodenumber_or_ipaddr="$1"		# e.g. <empty> or <nodenumber> or <ipaddr>

	# dont use CONFIG_PROFILE here, it does not work during early bootstrapping in apply_profile
	local system="$( uci -q get system.profile.ipsystem )"

	_ipsystem "${system:-ffweimar}" "$nodenumber_or_ipaddr"
}

_ipsystem_getvar()
{
	local varname="$1"
	local nodenumber="$2"	# <empty> = myself

	_ipsystem get $nodenumber | grep ^"$varname=" | cut -d'=' -f2
}

_ipsystem_ffweimar()			# ARG1: - empty       -> has_nodenumber? -> output for my nodenumber
{					#  	- "random" or empty && no_nodenumber?  -> output for random nodenumber
	local node_number="$1"		#       - IP-address  -> output nodenumber
	local city="${2:-63}"		#	- node-number -> output for this nodenumber, return 1 if not in range
	local network="${3:-10}"
    local ipv6_prefix="2001:bf7:193"
	local range_start="${4:-2}"
	local range_end="${5:-1020}"
	local range_first_random="${6:-970}"
	local wifi_mask="${7:-8}"

	local wifi_leasetime="30m"	# dnsmasq-syntax = 30 min
	local wifi_leasenum="29"
	local lan_leasenum="13"
	local oct1 oct2 oct3 oct4 oldIFS s n random node_number_hex node_hex

	# a typical node 16:
	# all:  10.63.16.0  /26  (=  0...64)
	# WIFI: 10.63.16.0  /27  (=  1...30) = 29 x DHCP
	# LAN:  10.63.16.32 /28  (= 33...46) = 13 x DHCP
	# ---:          .48 /29  (= 49...54) =  6 x IP (unused)
	# VPN:  10.63.16.56 /30  (= 57...58) =  1 x here, 1 x remote
	# WAN:  10.63.16.60 /30  (= 61...62) =  1 x here, 1 x remote

	if [ -z "$node_number" ]; then
		node_number="${NODENUMBER:-$( _math random_integer "$range_first_random" "$range_end" ) }"
	elif [ "$node_number" = "random" ]; then
		node_number=$( _math random_integer "$range_first_random" "$range_end" )
	elif _sanitizer run "$node_number" ip4 check ; then
		oldIFS="$IFS"; IFS='.'; set -- $node_number; IFS="$oldIFS"
		oct1="$1"; oct2="$2"; oct3="$3"; oct4="$4"

		if [ $oct1 -eq $network -a $oct2 -eq $city ]; then
			if   [ $oct4 -gt 191 ]; then
				echo $(( $oct3 + 765 ))
			elif [ $oct4 -gt 127 ]; then
				echo $(( $oct3 + 510 ))
			elif [ $oct4 -gt  63 ]; then
				echo $(( $oct3 + 255 ))
			else
				echo $oct3
			fi

			return 0
		else
			return 1
		fi
	fi

	if [ "$node_number" -ge "$range_start" -a "$node_number" -le "$range_end" ]; then
		s="0"			# subnetstart 	e.g. network.city.100.${S}
		n="$node_number"	# nodenumber_id	e.g. network.city.${N}.0
        random="false"
        node_number_hex=$( printf "%X" "$node_number"; )
        node_hex="0:$node_number_hex"
        
		if [ "$node_number" -ge "$range_first_random" ]; then
			n=$(( node_number - 765 ))
			s=192
			random="true"
            node_number_hex=$( printf "%X" "$node_number"; )
            node_hex=$( echo "$node_number_hex" | sed 's/^.*\(.\)\(..\)$/\1:\2/g' )
		elif [ "$node_number" -gt 765 ]; then
			n=$(( node_number - 765 ))
			s=192
            node_number_hex=$( printf "%X" "$node_number"; )
            node_hex=$( echo "$node_number_hex" | sed 's/^.*\(.\)\(..\)$/\1:\2/g' )
		elif [ "$node_number" -gt 510 ]; then
			n=$(( node_number - 510 ))
			s=128
            node_number_hex=$( printf "%X" "$node_number"; )
            node_hex=$( echo "$node_number_hex" | sed 's/^.*\(.\)\(..\)$/\1:\2/g' )
		elif [ "$node_number" -gt 255 ]; then
			n=$(( node_number - 255 ))
			s=64
            node_number_hex=$( printf "%X" "$node_number"; )
            node_hex=$( echo "$node_number_hex" | sed 's/^.*\(.\)\(..\)$/\1:\2/g' )
		fi
	else
		return 1
	fi

cat << EOF
NODE_NUMBER=$node_number
NODE_NUMBER_RANDOM=$random
OLSR_HNA=$network.$city.$n.$s/26

LAN_ADR=$network.$city.$n.$(( s + 33 ))
LAN_IP=$network.$city.$n.$(( s + 33 ))/28
LAN_IP_1ST=$network.$city.$n.$(( s + 34 ))/28
LAN_PRE=28
LAN_DHCP_PRE=28
LAN_DHCP_NUM=$lan_leasenum
LAN_DHCP_LEASETIME=12h
LANADR=$network.$city.$n.$(( s + 33 ))
LAN1ST=$network.$city.$n.$(( s + 34 ))
LANMSK=255.255.255.240
LAN6ADR=$ipv6_prefix$node_hex$(echo "00::")
LAN6MSK=64
LANBRC=$network.$city.$n.$(( s + 47 ))
LANNET=$network.$city.$n.$(( s + 32 ))
LANPRE=28
LANDHCPSTART=$(( s + 34 ))
LANDHCPNUM=$lan_leasenum

WIFI_ADR=$network.$city.$n.$(( s + 1 ))
WIFI_IP=$network.$city.$n.$(( s + 1 ))/$wifi_mask
WIFI_IP_1ST=$network.$city.$n.$(( s + 2 ))
WIFI_PRE=8
WIFI_DHCP_PRE=27
WIFI_DHCP_NUM=$wifi_leasenum
WIFI_DHCP_LEASETIME=$wifi_leasetime

DHCP_LAN="$network.$city.$n.$(( s + 34 ))/28,$lan_leasenum,12h"
DHCP_WIFI="$network.$city.$n.$(( s + 2 ))/27,$wifi_leasenum,$wifi_leasetime"

FFF_CITY=$city
FFF_NET=$network
FFF_NODE=$node_number
FFF_HNA=$network.$city.$n.$s/26

IPV6NET=$ipv6_prefix$node_hex$(echo "::")
IPV6MSK=56

WIFIADR=$network.$city.$n.$(( $s + 1 ))
WIFI1ST=$network.$city.$n.$(( $s + 2 ))
WIFIMSK=255.255.255.224
WIFI6ADR1=$ipv6_prefix$node_hex$(echo "01::")
WIFI6MSK1=64
WIFI6ADR2=$ipv6_prefix$node_hex$(echo "02::")
WIFI6MSK2=64
WIFIBRC=$network.$city.$n.$(( $s + 31 ))
WIFINET=$network.$city.$n.$s
WIFIPRE=27

WANADR=$network.$city.$n.$(( $s + 61 ))
WAN1ST=$network.$city.$n.$(( $s + 62 ))
WANMSK=255.255.255.252
WANBRC=$network.$city.$n.$(( $s + 63 ))
WANNET=$network.$city.$n.$(( $s + 60 ))
WANPRE=30
WAN_ADR=$network.$city.$n.$(( $s + 61 ))
WAN_PRE=30
WAN_IP=$network.$city.$n.$(( $s + 61 ))/30

WIFIDHCPSTART=$network.$city.$n.$(( $s + 2 ))
WIFIDHCPNUM=$wifi_leasenum

WIFIVPNNET=$network.$city.$n.$(( $s + 56 ))
WIFIVPNSERVERADR=$network.$city.$n.$(( $s + 57 ))
WIFIVPNCLIENTADR=$network.$city.$n.$(( $s + 58 ))
WIFIVPNBRC=$network.$city.$n.$(( $s + 59 ))
WIFIVPNPRE=30

VPN6ADR=$ipv6_prefix$node_hex$(echo "ff::")
VPN6MSK=64

ROAMING_IP4=172.31.$city.$network
ROAMING_PRE=24
EOF
}
