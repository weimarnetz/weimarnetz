#!/bin/sh

_olsr_build_overview_static()		# runs as cron.minutely on vpn-server into '/tmp/statuspage_neigh_pregenerated'
{
	local funcname='olsr_build_overview_static'
	local output="${1:-/var/www/cgi-bin-status.html}"

	local time1 time2 size
	local tempfile="/tmp/$funcname"

	_olsr uptime is_short && return 0

	_stopwatch start "$funcname:build_tables"
	# only on VPN-server: see uci() in /tmp/loader
	uci unvalid_call 2>/dev/null && _olsr build_tables
	time1="$( _stopwatch stop "$funcname:build_tables" )"

	_stopwatch start "$funcname:cgi-bin-status.sh"
	REMOTE_ADDR= /www/cgi-bin-status.sh >"$tempfile"
	time2="$( _stopwatch stop "$funcname:cgi-bin-status.sh" )"
	size=$( _file size "$tempfile" )

	sed -i "s|</title>| - $time1/$time2 - ${size}bytes (cache) &|" "$tempfile"
	cp "$tempfile" "$output"

	# this is ugly, we really compress 2 times (for showing compressed size)
	gzip "$tempfile"
	size=$( _file size "$tempfile.gz" )
	gzip -d "$tempfile.gz"
	sed -i "s|bytes (cache) |&($size bytes gzip)|" "$tempfile"
	gzip "$tempfile"
	mv "$tempfile.gz" "$output.gz"

	# remove all marker-files (because we have fresh values), see /www/cgi-bin-status.sh
	touch '/tmp/statuspage_neigh_lastfetch_LOCAL'
	rm /tmp/statuspage_neigh_lastfetch_*
}


_olsr_build_tables ()				# building of /tmp/OLSR_TMP/ALL 		// is called every minute
{						#			   /LINKS
	local func="olsr_build_tables"		#			   /LINKS.sh
	local line				# and moving /tmp/OLSR_TMP/* -> /tmp/OLSR (which is used by all functions)
	local uptime_was_short			# also collecting routing_table
	local configfile="/var/etc/olsrd.conf"
	local max_errors=3

	mkdir -p /tmp/OLSR /tmp/OLSR_TMP

	[ -e "$configfile" ] || {
		_log do $func daemon info "config file not found, daemon was never started"
		return 0
	}

	while _olsr uptime is_short ; do {
		_log do $func daemon info "waiting till olsr-uptime is long enough"
		uptime_was_short="true"
		sleep 10
	} done

	while true; do {
		if _wget do "http://127.0.0.1:2006/all" >/tmp/OLSR_TMP/ALL ; then
			[ -e "/tmp/OLSR_TMP/ALL" ] && {
				[ "$( _file size "/tmp/OLSR_TMP/ALL" )" = "0" ] || {
					break
				}
			}

			[ $max_errors -eq 0 ] && return 1

			_log do $func daemon info "zero txtinfo.plugin-output, trying again"
		else
			if [ $max_errors -eq 0 ]; then
				if pidof olsrd >/dev/null ; then
					_olsr daemon restart "$func did not work, but daemon is up"
				else
					_olsr daemon start   "$func did not work, daemon is not up"
				fi

				return 1
			else
				_log do $func daemon info "wget-error trying again"
			fi
		fi

		max_errors=$(( $max_errors - 1 ))
		sleep "$( _math random_integer 1 5 )"
	} done

	ip route show table main >/tmp/OLSR_TMP/ROUTING_TABLE_MAIN	# fixme! update also when fetching neighbour table fails?

	while read line; do {
		case "$line" in
			"Table: Neighbors")			# fixme! safe all paragraphs? (All, Links, Neighbours, Topology, HNA, MID, Routes)
				break
			;;
			*)
				echo "$line"
			;;
		esac
	} done </tmp/OLSR_TMP/ALL >/tmp/OLSR_TMP/LINKS
								# COST of 'INFINITE' is converted to ''

	sed -n '/0\.00/s/^\([0-9\.]*\)[^0-9]*\([0-9\.]*\)[^0-9]*0\.00[^0-9]*\([0-9\.]*\)[^0-9]*\([0-9\.]*\)[^0-9]*\([0-9\.]*\)/LOCAL=\1;REMOTE=\2;LQ=\3;NLQ=\4;COST=\5;COUNT=\$\(\( \$COUNT \+ 1 \)\)/p' "/tmp/OLSR_TMP/LINKS" >"/tmp/OLSR_TMP/LINKS.sh"

	mv /tmp/OLSR_TMP/* /tmp/OLSR

	did_we_ever_had_neighbours()
	{
		ls -1 /tmp/OLSR/isneigh_* >/dev/null 2>/dev/null
	}

	did_we_ever_had_neighbours && {
		[ $( _file size "/tmp/OLSR/LINKS.sh" ) -eq 0 ] && {
			_log do $func daemon alert "detected 0 neighbours"
			return 1
		}
	}

	[ "$uptime_was_short" = "true" ] && {
		/usr/sbin/cron.check_inet_gw_fff+
	}

	return 0
}

_olsr_gateways_get()            # OUT: list with each HNA4-0.0.0.0/0-announcing IP line by line
{
        local file="/tmp/OLSR/ALL"      # fixme! make ROUTES
        local line

        grep ^"0.0.0.0/0" "$file" | while read line; do set -- $line; test -n "$3" || echo $2; done
}

_olsr_remoteip2metric ()	# need OLSR_ROUTES
{
	local ip="$1"
	local file="/tmp/OLSR/ALL"	# fixme! make ROUTES

	ip="$( echo $ip | sed 's/\./\\\./g' )\/32"	# hiding dots for next regex and sed-safe append /32

	sed -n "/^$ip/{s/^$ip	[0-9\.]*	\([0-9]*\)	.*/\1/p;q}" "$file"
}

_olsr_daemon()
{
	local funcname="olsr_daemon"
	local ACTION="$1"
	local REASON="${2:-no_reason_given}"
	local LOGPRIO="alert"
	local LIST

	case "$REASON" in
		olsrd_restart_scheduler_controlled|plausi_check_failed|"becoming hna-master"*)
			LOGPRIO=info
		;;
	esac

	case "$ACTION" in
		start|stop|restart)

			case "$ACTION" in
				start|restart)
					_olsr uptime mark_restart
					echo >>/tmp/OLSR/restart_reasons "$( date ): $REASON"

					[ "$ACTION" = "start" ] && {
						pidof olsrd >/dev/null && {
							ACTION="restart"
						}
					}
				;;
			esac

			if [ "$ACTION" = "restart" ]; then
				LIST="stop start"
			else
				LIST="$ACTION"
			fi

			for ACTION in $LIST; do {
				_log do $funcname daemon $LOGPRIO "$ACTION: $REASON"
				
				if [ -e /etc/init.d/*olsrd ]; then
					/etc/init.d/*olsrd $ACTION | logger -s
				else
					# on vpn-server:
					# ln -s /root/olsrd1/olsrd-0.6.7/olsrd /usr/sbin/olsrd
					local olsrd_bin='/usr/sbin/olsrd'
					local olsrd_config='/etc/olsrd.conf'

					case "$ACTION" in
						stop)
							killall olsrd
						;;
						start)
							$olsrd_bin -f "$olsrd_config" -nofork &
						;;
					esac
				fi

				case "$ACTION" in
					stop)
						sleep 3
						pidof olsrd >/dev/null && {
							_watch hanging_command olsrd || {
								sleep 3
								_watch hanging_command olsrd
							}
						}
					;;
					start)
						_scheduler add "sleep 300"
						_scheduler add "_net refresh_dnshosts"
					;;
				esac
			} done
		;;
	esac
}

_olsr_uptime ()		# in seconds
{
	local KEYWORD="$1"		# string: "is_short", "mark_restart", "restarts_get", "restart_time" or <empty> = get
	local FUNC="olsr_uptime"
	local FILE_RESTART_TIME="/tmp/STATS_OLSR_RESTART_LAST"
	local FILE_RESTARTS="/tmp/STATS_OLSR_RESTARTS"
	local TIME_LAST_START TIME_NOW DIFF I

	TIME_NOW="$( _system uptime )"

	if [ -e $FILE_RESTART_TIME ]; then
		read TIME_LAST_START <$FILE_RESTART_TIME
	else
		echo "$TIME_NOW" >$FILE_RESTART_TIME
		TIME_LAST_START="$TIME_NOW"
	fi

	DIFF="$(( $TIME_NOW - ${TIME_LAST_START:-0} ))"

	case "$KEYWORD" in
		is_short)
			if [ $DIFF -lt 30 ]; then
				return 0
			else
				return 1
			fi
		;;
		mark_restart)
			echo "$TIME_NOW" >$FILE_RESTART_TIME
			
			read I 2>/dev/null <$FILE_RESTARTS
			echo $(( ${I:-0} + 1 )) >$FILE_RESTARTS
		;;
		restarts_get)
			read I 2>/dev/null <$FILE_RESTARTS

			[ ${I:-0} -gt 300 ] && {
				_log do $FUNC daemon alert "busybox bug: restarts_get: $I"
				I=0
			}

			echo ${I:-0}
		;;
		restart_time)
			DIFF="$(( $TIME_NOW - ${TIME_LAST_START:-0} ))"
			echo "$(( $( _system date unixtime ) - $DIFF ))"
		;;
		*)
			echo -n $DIFF
		;;
	esac
}

_olsr_restarts_are_suspicious_often ()
{
	local func="olsr_restarts_are_suspicious_often"
	local daemon_restarts="$( _olsr uptime restarts_get )"
	local basecount="30"
	local percent border

	border="$(( $( _system uptime days ) * 3 ))"	# normally we hard restart 3 times a day:
	border="$(( $border + $basecount ))"		# 1 x cron.minutely + at 4 and 6 o'clock

	percent="$(( $daemon_restarts * 100 ))"
	percent="$(( $percent / $border ))"

	_log do $func daemon debug "percent from border: ${percent}% restarts: $daemon_restarts border: $border"	

	if [ $percent -gt 100 ]; then
		_log do $func daemon alert "[ERR] olsr restarts > normality (${percent}%: $daemon_restarts > $border)"

		if [ $percent -gt 300 ]; then	# seems to be a busybox-bug of v1.19.4
			return 0		# sometimes we see values of 35148643% (large restart count)
		else
			return 1
		fi
	else
		return 1
	fi
}



