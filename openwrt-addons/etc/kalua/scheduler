#!/bin/sh

# we need a monotonic counter for both: SCHEDULER / SCHEDULER_IMPORTANT
# with 8 digits -> max = 1157 days; note: var PID is the uptime
PID= read -r PID _ </proc/uptime
SCHEDULER=${SCHEDULER-/tmp/SCHEDULER/job_$(printf %08.0f ${PID%.*}; mkdir -p /tmp/SCHEDULER)}
SCHEDULER_QUEUE='/tmp/SCHEDULER/*'
SCHEDULER_IMPORTANT=${SCHEDULER_IMPORTANT-/tmp/SCHEDULER/important_$(printf %08.0f $$)}
SCHEDULER_IMPORTANT_QUEUE='/tmp/SCHEDULER/important_*'

_scheduler_vars ()
{
	FILE_SCHEDULER_TMP="/tmp/scheduler_queue_tmp_"		# scheduler_add() appends an counter to filename
	FILE_SCHEDULER="/tmp/scheduler_queue"			# HINT: it is also possible to (scp-)upload a file
	FILE_SCHEDULER_COPY="/tmp/scheduler_queue_copy"		#       called ${FILE_SCHEDULER_TMP}xyz for automatic
}								#       execution on many devices...

_scheduler_queue_purge ()		# fixme! wait till running jobs have ended?
{
	_log it purge_queues daemon info "removing"
	_scheduler vars
	rm $FILE_SCHEDULER_TMP* $FILE_SCHEDULER $FILE_SCHEDULER_COPY 2>/dev/null
}

_scheduler_queue_list ()
{
	local funcname="scheduler_list_queue"
	local option="$1"
	local empty1 empty2

	_scheduler vars

	_log it $funcname daemon debug "working with option: '$option'"

	echo "# actual,running queue:"
	cat $FILE_SCHEDULER_COPY 2>/dev/null || {
		echo -en "# empty!\n\n"
		empty1="true"
	}

	echo -en "\n# waiting queue:\n"
	cat ${FILE_SCHEDULER_TMP}* 2>/dev/null || {
		echo -en "# empty!\n\n"
		empty2="true"
	}

	[ "$option" = "is_empty" ] && {
		if [ "${empty1}${empty2}" = "truetrue" ]; then
			return 0
		else
			return 1
		fi
	}
}

_scheduler_print_usage ()
{
	local FUNC="scheduler_print_usage"
	
	_log it $FUNC daemon info "working"

	cat <<EOF
 
Sens:	 Adds program calls to a queue and executes all
	 these calls step by step. This prevents high
	 cpu-load and/or memory-consumption, but is not
	 executed at an exact timestamp.
 
Usage:	 $0 -option1 -option2 -optionN
 
Options: -a "TASK"   adds an TASK to queue, where TASK can be keyword
	 -A "TASK"   immediately runs TASK, does not respect cpu-load
	 -r          runs the queue, step by step
	 -l          lists running and waitung queue
	 -p	     purge all queues
	 -f	     overload check (last 5min)
	 -P	     gateway ping-test
	 -O	     fetch OLSR-table
	 -o	     special: checks for incoming olsr-packets and
		     restarts daemon with new conf if neccessary
	 -u	     check syslog for kernel-oops, reboot if needed
	 -w	     check mac80211_wifi for problems
	 -H	     build overload check /tmp/WELCOME_HELPER for uhttpd
	 -S "name"   load a set of scheduled services according to actual time

Example: $0 -s3 -a do_this -a do_that -r -a do_another_thing -r
 
	 This invokes a sleep for 3 seconds,
	 adds "do_this" to queue, then adds "do_that" to queue, then
	 runs the queue, then adds an user-defined program call to
	 queue, then runs the queue. Keywords must be defined in
	 _scheduler(). Ofcourse you should only use the queue, if
	 exact executing-time of your program does'nt really matter.
 
	 $0 -A "program1 arg1" -a "program2 arg1 arg2" -l
 
	 This immediately start "program1" with "arg1", than adds an
	 user-defined programm call with args and then lists all queues.
 
EOF
}

_scheduler_task2command ()
{
	local FUNC="scheduler_task2command"
	local TASK="$1"
	local COMMAND
	
	case "$TASK" in
		    upgrade_packages)	COMMAND="/usr/sbin/cron.upgrade_packages" ;;
	       watch_hanging_command)	COMMAND=". /tmp/loader; for option in mv scp wget nc; do _watch hanging_command \$option; done" ;;
		        restart_olsr) 	COMMAND=". /tmp/loader; _olsr daemon restart olsrd_restart_scheduler_controlled" ;;
			    registrator)	COMMAND="/usr/sbin/cron.registrator_client.sh" ;;
		           1h_checks)	COMMAND="/usr/sbin/cron.hourly"; >/tmp/SEND_ALIVE_FAILED ;;
		       gateway_check)	COMMAND="/usr/sbin/cron.check_inet_gw_fff+" ;;	
				   *)

					extract_function_name ()
					{
						echo "$1" | cut -d'_' -f2 | cut -d' ' -f1	# "_sms_send bla" -> "sms"
					}							# "_sms send bla" -> "sms"

				   	is_function ()
				   	{
				   		type "_$( extract_function_name \"$1\" )" >/dev/null && return 0
				   	}

					case "$TASK" in
						_*)
							is_function "$TASK" && {
								COMMAND=". /tmp/loader; _$( extract_function_name \"$TASK\" ) include; $TASK"
								TASK=
							}
						;;
						*)
							COMMAND="$TASK"
							TASK=
						;;
					esac	

				        _log it $FUNC daemon debug "user defined: '$COMMAND'"
				;;
	esac
	
	echo "$COMMAND"
}

_scheduler_add ()
{
	_scheduler vars
	
	local TASK="$1"
	local KEYWORD="$2"		# move2top|force
	local COMMAND COUNTER
	local FUNC="scheduler_add"
	local logprio="debug"

	COMMAND="$( _scheduler task2command "$TASK" )" || return 0

	case "$KEYWORD" in
		move2top)				# insert on top, if not already in waiting_queue

			cat ${FILE_SCHEDULER_TMP}1000* 2>/dev/null | head -n1 | grep -q ^"$COMMAND" && {
				_log it $FUNC daemon $logprio "$KEYWORD - PID: '$$' - '$TASK' - already in queue, ignoring"
				return
			}

			COUNTER="$(( 1000000000 + $$ ))"
		;;
		force)
			[ "$( fgrep -s "$COMMAND" ${FILE_SCHEDULER_TMP}* $FILE_SCHEDULER_COPY | wc -l )" -ge 2 ] && {
				_log it $FUNC daemon info "not adding '$COMMAND', already more then 2 times in queue"
				return
			}
		;;
		*)
			# fixme! better begin search at line_start
			# but if we use regex, we have to escape special chars like * and .

			fgrep -sq "$COMMAND" ${FILE_SCHEDULER_TMP}* $FILE_SCHEDULER_COPY && {
				_log it $FUNC daemon $logprio "PID:'$$' - '$TASK' - already in queue, ignoring"
				return
			}
		;;
	esac

	[ -z "$COUNTER" ] && {
		COUNTER="$( _system date unixtime )"	# we need a monotonic + always_same_length-counter here, so better not use $$ (process-id)
	}						# this is only true from 2001-Sep-10 ... 2038-Jan-19

	_log it $FUNC daemon $logprio "PID:'$$' +'$TASK'"
	echo "$COMMAND   # $TASK" >>${FILE_SCHEDULER_TMP}${COUNTER}
}

_scheduler_check_if_every_Nth_minute ()
{
	# some tasks should be repeated regulary, but NOT on the same
	# time on every node in the mesh. so we need a way the schedule
	# a script every X minutes based on uptime and not on daytime,so:
	# check every min, if uptime is divisor of X (without a rest)

	local UPTIME="$( _system uptime min )"	# e.g. uptime = 60 and
	local CARRYOVER="$(( $UPTIME % $1 ))"	# e.g. every = 55 min : 60 % 55 = 5 
	
	[ "$CARRYOVER" -eq 0 ] && {
		_log it scheduler_check_if_every_Nth_minute daemon debug "call '$2' for ${1}th minute, uptime: $UPTIME"
		return 0
	}

	return 1
}

_scheduler_wait_till_cpuload_is_low ()
{
	[ -e "/usr/sbin/cron.minutely" ] && return 0

	_system include

	local WAITING_TASK="$1"
	local FUNC="scheduler_wait_till_cpuload_is_low"
	local CPU_LOAD="$( _system load 1min )"
	local TARGET=60
	local WAIT

	while [ ${CPU_LOAD:=100} -gt $TARGET ]; do {
		WAIT=$(( 5 + ($CPU_LOAD - $TARGET) / 2 ))
		[ ${WAIT:=100} -gt 300 ] && WAIT=300
		
		_log it $FUNC daemon debug "PID:'$$' - load >=0.$TARGET ($CPU_LOAD) - waiting $WAIT sec (for '$WAITING_TASK')"
		
		TARGET=$(( $TARGET + 1 ))
		sleep $WAIT
		CPU_LOAD="$( _system load 1min )"
	} done
}

_scheduler_allow_run()
{
	local funcname="scheduler_allow_run"
	local lockfile="/tmp/lockfile_scheduler_is_running"

	[ -e "/tmp/START_SYSUPGRADE" ] && return	# fixme! why?

	local load_border="3"		# means load of 0.03 // fixme! check dynamic lowest load ever and take this...
	_scheduler vars

	[ $( _system uptime min ) -lt 5 ] && {
		return 1
	}

	if [ -e "$lockfile" ]; then

		_watch counter "/tmp/scheduler_lockfile_counter" increment 1 max 60 || {
			_log it $funcname daemon alert "removing lockfile, which seems to be left by accident"
			rm "$lockfile"
		}

		return 1

#		if [ "$( _system load 1min )" -lt $load_border ]; then
#			_log it $funcname daemon info "lockfile exists, but allowing due to low system load < 0.${load_border}"
#			return 0
#		else
#			_log it $funcname daemon info "already running, ignoring call (task: $( cat $lockfile ))"
#			return 1
#		fi
	else
		_watch counter "/tmp/scheduler_lockfile_counter" set 1
	fi

	return 0
}

_scheduler_run ()
{
	_scheduler vars

	local FUNC="scheduler_run"
	local FILE LINE
	local LOCKFILE="/tmp/lockfile_scheduler_is_running"

				# fixme! better use 'scheduler_run.sh' instead of lockfile
	scheduler_cleanup ()	# fixme! respect DRY
	{
		rm "/tmp/lockfile_scheduler_is_running"
		_log it scheduler_run daemon info "cleanup called during '$LINE'"

		exit 1		# fixme! use return?
	}


	if _scheduler allow_run ; then
		trap "scheduler_cleanup" SIGINT	# SIGINT = CTRL+C, SIGHUP/SIGTERM?
		touch "$LOCKFILE"
	else
		return 1
	fi


	local list_scheduler_file_parts="$( ls -1 ${FILE_SCHEDULER_TMP}* 2>/dev/null )"
	if [ -n "$list_scheduler_file_parts" ]; then

		for FILE in $list_scheduler_file_parts; do {	# this builds the running queue from temp_queue
			while read LINE; do {
				_log it $FUNC daemon debug "fetching '$LINE' from file '$FILE'"
				echo "$LINE" >>$FILE_SCHEDULER
			} done <$FILE
			rm $FILE
		} done
		cp $FILE_SCHEDULER $FILE_SCHEDULER_COPY		# for checking of DUPs in running queue -> scheduler_add()

		while read LINE; do {

			_scheduler wait_till_cpuload_is_low "$LINE"

			_log it $FUNC daemon debug "running '$LINE'"
			echo "$LINE" >$LOCKFILE
			/bin/sh -c "$LINE"
			_log it $FUNC daemon debug "ready '$LINE'"

		} done <$FILE_SCHEDULER
	else
		_log it $FUNC daemon debug "empty queue - no action"
	fi

	rm $FILE_SCHEDULER $FILE_SCHEDULER_COPY $LOCKFILE 2>/dev/null


	return 0
}
